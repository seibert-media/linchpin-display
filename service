#!/usr/bin/env python

import json
import requests
import traceback
import time
from datetime import datetime, timedelta
import base64
import pytz
import urllib3
from os import getenv
from os.path import isfile

from hosted import CONFIG, NODE

CWA_QR_URL = 'https://cwa-qr-generator.smedia.tools/generate'

CONFIG.restart_on_update()

urllib3.disable_warnings()

session = requests.Session()
session.auth = (CONFIG['username'], CONFIG['password'])

ssl_verify = not CONFIG['ssl_no_verify']


def replace_entities_in_string(string):
    # I know, this could be done using HTMLParser - but this opens a can
    # of worms because we're dealing with python2.7 and unicode.
    for source, replacement in {
        '&nbsp;': ' ',
        '&amp;': '&',
        '&gt;': '>',
        '&lt;': '<',
    }.items():
        string = string.replace(source, replacement)

    return string


def generate_cwa_qr_code():
    if CONFIG['logo_type'] != 'cwa':
        print '[CWA QR] disabled'
        return

    utc_last_midnight = int((time.time()//86400)*86400)
    utc_next_midnight = utc_last_midnight+86400
    needs_regenerate = False
    try:
        with open('cwa-qr-code.txt', 'r') as f:
            old_content = f.read().splitlines()

        if int(old_content[0]) < utc_last_midnight:
            print '[CWA QR] older than last midnight'
            needs_regenerate = True

        if old_content[1] != CONFIG['qr_description']:
            print '[CWA QR] qr_description has changed'
            needs_regenerate = True
    except Exception as e:
        print '[CWA QR] could not detect changes: {}'.format(repr(e))
        needs_regenerate = True


    if needs_regenerate:
        try:
            qr = requests.post(
                CWA_QR_URL,
                json={
                    'description': CONFIG['qr_description'],
                    'address': 'linchpin display {}'.format(getenv('SERIAL')),
                    'start_utc': utc_last_midnight,
                    'end_utc': utc_next_midnight,
                    'location_type': 6,
                    'checkin_length_minutes': (CONFIG['qr_checkin_time']*60),
                    'qr_size': 300,
                },
                headers={'Content-Type': 'application/json'},
            )
            qr.raise_for_status()
            with open('cwa-qr-code.png', 'wb') as img:
                img.write(qr.content)

            with open('cwa-qr-code.txt', 'w') as f:
                f.write('{}\n{}\n'.format(
                    (utc_next_midnight-10),
                    CONFIG['qr_description'],
                ))

            print '[CWA QR] renewed'
        except Exception as e:
            print '[CWA QR] could not be renewed: {}'.format(repr(e))
    else:
        print '[CWA QR] does not need renewing'


def fetch_posts():
    query_params = {
        'offset': 0,
        'limit': CONFIG['item_count'],
    }

    if len(CONFIG['additional_query']) > 0:
        query_params.update({'config': CONFIG['additional_query']})

    if CONFIG['feed'] == 'personal':
        url = CONFIG['base_url'] + '/rest/enterprise-news-bundle/1.0/personal-news-feed'

    else:
        url = CONFIG['base_url'] + '/rest/enterprise-news-bundle/1.0/corporate-news-feed'

    return session.get(url, params=query_params, headers={'Accept': 'application/json'}, verify=ssl_verify).text


def regenerate():
    posts = []

    result = fetch_posts();

    try:
        for post in json.loads(result):
            postId = str(post['postId'])
            date = datetime.fromtimestamp(int(post['creationDate']/1000))
            likes_and_comments = '{l} like{ls}, {c} comment{cs}'.format(
                l=post['socialFeatures']['numberOfLikes'],
                ls='s' if post['socialFeatures']['numberOfLikes'] != 1 else '',
                c=post['socialFeatures']['numberOfComments'],
                cs='s' if post['socialFeatures']['numberOfComments'] != 1 else '',
            )

            categories = set()
            for cat_id, cat_name in post.get('metadata', {}).get('categoryMap', {}).items():
                categories.add(replace_entities_in_string(cat_name))

            posts.append({
                'postId': postId,
                'title': replace_entities_in_string(post['title']),
                'image': True if 'imageUrl' in post else False,
                'excerpt': replace_entities_in_string(post['excerpt']),
                'kicker': replace_entities_in_string(post.get('metadata', {}).get('kicker', '')).upper(),
                'infoline': CONFIG['infoline_formatstring'].format(
                    author=replace_entities_in_string(post['creatorFullName']),
                    date=date.strftime('%A, %d.%m. %H:%M'),
                    likes_and_comments=likes_and_comments,
                    space=post['spaceName'],
                    categories=', '.join(sorted(categories)),
                ),
            })

            if 'imageUrl' in post and not isfile('postImage-'+postId+'.png'):
                with open('postImage-'+postId+'.png', 'wb') as i:
                    image = session.get(CONFIG['base_url'] + post['imageUrl'], verify=ssl_verify)
                    i.write(image.content)
    except Exception as e:
        print repr(e)
        raise

    if len(posts) > 0:
        with file("posts.json", "wb") as f:
            f.write(json.dumps(posts,ensure_ascii=False).encode("utf8"))

            print 'Wrote {} posts to posts.json'.format(len(posts))


def main():
    while 1:
        try:
            regenerate()
            generate_cwa_qr_code()
            time.sleep(60)
        except Exception:
            traceback.print_exc()
            time.sleep(30)

if __name__ == "__main__":
    main()
